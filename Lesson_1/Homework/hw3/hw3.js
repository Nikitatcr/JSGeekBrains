"use strict!";

let result1 = 10 + 10 + "10";
console.log(result1);

/*
10 прибавляем 10 получаем 20
10 прибавляем "10" получаем 1020
с помощью console.log выводим результат в консоль

Такой результат получился, потому что я поставил кавычки у "10". 
Интерпретатор посчитал это за строку и произвёл конкатенацию.
*/

let result2 = 10 + "10" + 10;
console.log(result2);

/*
10 прибавляем "10" получаем 1010, потому что привели второй операнд к типу string и произошла конкатенация и общее приведение к типу string.
Дальше к "1010" как к string производится новая конкатенация. Число 10 приводится к типу string и прибавляется к строке.
В итоге получается 101010.
С помощью console.log выводим результат в консоль.
*/

let result3 = 10 + 10 + +"10";
console.log(result3);

/*
10 + 10. Интерпретатор распознает и сохраняет это как число = 20. 
Дальше прибавляем к числу 20 строку "10", но с оператором '+' перед строкой, который приводит строку обратно к числу.
На выходе получаем 30.
С помощью console.log выводим результат в консоль.
*/

let result4 = 10 / -"";
console.log(result4);

/*
10 делим на строку с оператором '-'. Оператор приводит строку к числу. Поскольку в строке ничего нет, то число определяется как -0.
Делим 10 на -0, уже как числа и получаем результат '-Infinity' как число -бесконечность. typeof(-Infinity) -> "number"
С помощью console.log выводим результат в консоль.
*/

let result5 = 10 / +"2,5";
console.log(result5);

/*
10 делим на строку с оператором '+'. Строка 2,5 не распознается как какое-то число и определяется как NaN, что также является числом, как тип.
То есть оператор '+' сработал, но из-за неправильного синтаксиса, где вместо запятой должна стоять точка, определил 2,5 как NaN
10, что делится на NaN в итоге даёт результат NaN 
*/